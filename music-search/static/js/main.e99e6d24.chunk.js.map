{"version":3,"sources":["Title.js","SearchResult.js","App.js","serviceWorker.js","index.js"],"names":["Title","this","props","title","length","className","React","Component","SearchResult","entity","results","map","album","index","key","getAlbumSongs","song","loading","src","alt","nothing_found","showContent","Song","artworkUrl60","trackName","collectionName","artistName","discNumber","trackNumber","Album","href","onClick","e","collectionId","trackCount","releaseDate","slice","primaryGenreName","SEARCH_URL","App","state","query","getSongs","bind","getAlbums","changeQuery","clearSearch","event","setState","target","value","urlParams","encodeURIComponent","replace","fetch","then","response","json","data","catch","console","log","preventDefault","type","onChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e99e6d24.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Title extends React.Component {\n    render() {\n        if (this.props.title.length === 0) {\n            return null\n        }\n\n        return (\n            <div>\n                <p className=\"title\">{this.props.title}</p>\n            </div>\n        )\n    }\n}\n\nexport default Title;\n","import React from 'react';\n\n\nclass SearchResult extends React.Component {\n    showContent() {\n        if (this.props.entity === \"album\") {\n            return this.props.results.map((album, index) => (\n                <Album\n                  key={index}\n                  album={album}\n                  getAlbumSongs={this.props.getAlbumSongs}>\n                </Album>\n            ));\n        }\n\n        return this.props.results.map((song, index) => (\n            <Song\n              key={index}\n              song={song}>\n            </Song>\n        ));\n    }\n\n    render() {\n        if (this.props.loading) {\n            return <img src=\"loading.gif\" alt=\"loading\" />;\n        }\n\n        if (this.props.nothing_found) {\n            return (\n                <div>\n                    <p>Nothing found!</p>\n                </div>\n            )\n        }\n\n        return (\n            this.showContent()\n        )\n    }\n}\n\nclass Song extends React.Component {\n    render() {\n        return (\n            <div className=\"card\">\n                <div className=\"card-img\"><img src={this.props.song.artworkUrl60} alt=\"album cover\" /></div>\n                <div className=\"card-content\">\n\n                    <p>{this.props.song.trackName}</p>\n                    <p>{this.props.song.collectionName}</p>\n                    <p>{this.props.song.artistName}</p>\n\n                    <div className=\"card-footer\">\n                        <p>Disc #: {this.props.song.discNumber}</p>\n                        <p>Track #: {this.props.song.trackNumber}</p>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nclass Album extends React.Component {\n    render() {\n        return (\n            <div className=\"card\">\n                <div className=\"card-img\"><img src={this.props.album.artworkUrl60} alt=\"album cover\" /></div>\n                <div className=\"card-content\">\n                    <p><a\n                      href=\"/#\"\n                      onClick={ e => this.props.getAlbumSongs(e, this.props.album.collectionId, this.props.album.collectionName)}>\n                        {this.props.album.collectionName}</a></p>\n                    <p>{this.props.album.artistName}</p>\n\n                    <div className=\"card-footer\">\n                        <p>Songs: {this.props.album.trackCount}</p>\n                        <p>Year: {this.props.album.releaseDate.slice(0, 4)}</p>\n                        <p>Genre: {this.props.album.primaryGenreName}</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default SearchResult;\n\n","import React from 'react';\nimport './App.css';\nimport Title from './Title.js';\nimport SearchResult from './SearchResult.js';\n\n\nconst SEARCH_URL = \"https://itunes.apple.com/search?\";\nconst LOOKUP_URL = \"https://itunes.apple.com/lookup?\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: \"\",\n            title: \"\",\n            entity: \"\",\n            results: [],\n            nothing_found: false,\n            loading: false,\n        };\n\n        this.getSongs = this.getSongs.bind(this);\n        this.getAlbums = this.getAlbums.bind(this);\n        this.getAlbumSongs = this.getAlbumSongs.bind(this);\n        this.changeQuery = this.changeQuery.bind(this);\n        this.clearSearch = this.clearSearch.bind(this);\n    }\n\n    changeQuery(event) {\n        this.setState({\n            query: event.target.value\n        })\n    }\n\n    clearSearch() {\n        this.setState({\n            query: \"\",\n            title: \"\",\n            results: [],\n            nothing_found: false,\n        })\n    }\n\n    getAlbums() {\n        let urlParams = \"media=music&entity=album&limit=200&term=\"\n        urlParams += encodeURIComponent(this.state.query.replace(/ /g, \"+\"));\n\n        this.setState({\n            title: this.state.query + \" albums\",\n            entity: \"album\",\n            loading: true\n        })\n\n        fetch(SEARCH_URL + urlParams)\n            .then(response => response.json())\n            .then((data) => {\n                this.setState({\n                    results: data.results,\n                    nothing_found: data.results.length === 0,\n                    loading: false\n                })\n            })\n            .catch(console.log)\n    }\n\n    getSongs() {\n        let urlParams = \"media=music&entity=song&limit=200&term=\"\n        urlParams += encodeURIComponent(this.state.query.replace(/ /g, \"+\"));\n\n        this.setState({\n            title: this.state.query + \" songs\",\n            entity: \"song\",\n            loading: true\n        })\n\n        fetch(SEARCH_URL + urlParams)\n          .then(response => response.json())\n          .then((data) => {\n            this.setState({\n              results: data.results,\n              nothing_found: data.results.length === 0,\n              loading: false\n            })\n          })\n          .catch(console.log)\n    }\n\n    getAlbumSongs(event, collectionId, collectionName) {\n        event.preventDefault();\n\n        let urlParams = \"media=music&entity=song&limit=200&id=\";\n        urlParams += collectionId;\n\n        this.setState({\n            title: collectionName + \" songs\",\n            entity: \"song\",\n            loading: true\n        })\n\n        // First element of result is album meta info, we remove it before setting state\n        fetch(LOOKUP_URL + urlParams)\n            .then(response => response.json())\n            .then((data) => {\n                this.setState({\n                    results: data.results.slice(1),\n                    loading: false\n                })\n            })\n            .catch(console.log)\n    }\n\n    render() {\n        return (\n          <div className=\"home\">\n\n            <h1>Music Search</h1>\n\n            <div className=\"header\">\n                <div className=\"search-container\">\n                    <input\n                      className=\"search-box\"\n                      type=\"text\"\n                      value={this.state.query}\n                      onChange={this.changeQuery}\n                      placeholder=\"Artist, Song, Album...\"\n                    />\n                </div>\n\n                <div className=\"buttons-container\">\n                    <button className=\"search-button\" onClick={this.getAlbums}>\n                      Get Albums\n                    </button>\n\n                    <button className=\"search-button\" onClick={this.getSongs}>\n                      Get Songs\n                    </button>\n\n                    <button className=\"search-button\" onClick={this.clearSearch}>\n                      Clear Search\n                    </button>\n                </div>\n            </div>\n\n            <Title title={this.state.title} />\n\n            <SearchResult\n              entity={this.state.entity}\n              loading={this.state.loading}\n              nothing_found={this.state.nothing_found}\n              results={this.state.results}\n              getAlbumSongs={this.getAlbumSongs}\n            />\n\n\n            <footer>© 2019 Maximiliano Medeiros</footer>\n          </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}